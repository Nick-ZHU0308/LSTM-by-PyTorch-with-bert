##  This part is from PyTorch offical one, I changed the embeding layer to bert model 
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from transformers import BertModel, BertTokenizer
torch.manual_seed(1)


##prepare training data
def prepare_sequence(seq, to_ix):
    idxs = [to_ix[w] for w in seq]
    return torch.tensor(idxs, dtype=torch.long)


training_data = [
    # Tags are: DET - determiner; NN - noun; V - verb
    # For example, the word "The" is a determiner
    ("The dog ate the apple".split(), ["DET", "NN", "V", "DET", "NN"]),
    ("Everybody read that book".split(), ["NN", "V", "DET", "NN"])
]
word_to_ix = {}
# For each words-list (sentence) and tags-list in each tuple of training_data
for sent, tags in training_data:
    for word in sent:
        if word not in word_to_ix:  # word has not been assigned an index yet
            word_to_ix[word] = len(word_to_ix)  # Assign each word with a unique index
print(word_to_ix)
tag_to_ix = {"DET": 0, "NN": 1, "V": 2}  # Assign each tag with a unique index

# These will usually be more like 32 or 64 dimensional.
# We will keep them small, so we can see how the weights change as we train.
EMBEDDING_DIM = 6
HIDDEN_DIM = 6


##create the model
##This version have problems, only shared here for my group mates. If this cause any problem, I apologize for that.
##创建模型
##测试用的修改版
class LSTMTagger(nn.Module):

  def __init__(self, embedding_dim, hidden_dim, vocab_size, tagset_size,tokenizer):
    super(LSTMTagger, self).__init__()
    self.hidden_dim = hidden_dim

##self.word_embeddings = nn.Embedding(vocab_size, embedding_dim)
##这是bert嵌入，目前认为这里的问题是不能直接用训练好的模型self.word_embeddings = BertModel.from_pretrained("bert-base-uncased")
    self.model=BertModel.from_pretrained('bert-base-uncased')
# The LSTM takes word embeddings as inputs, and outputs hidden states
# with dimensionality hidden_dim.
    ##self.lstm = nn.LSTM(768, hidden_dim, batch_first=True, bidirectional=True)
    self.lstm = nn.LSTM(768, hidden_dim)
  # The linear layer that maps from hidden state space to tag space
    self.hidden2tag = nn.Linear(hidden_dim, tagset_size)


  def forward(self, sentence):
  ##embeds = self.word_embeddings(sentence)
    PreTrained=self.model(sentence)
    ##print(PreTrained)
    ##PreTrained=torch.tensor(PreTrained)
    lstm_out, _ = self.lstm(PreTrained.pooler_output.view(len(sentence), 1, -1))
    ##lstm_out,_ = self.lstm(PreTrained)
    ##应该有hidden和input，但为什么只有一个参数，这个变换又是什么？
    tag_space = self.hidden2tag(lstm_out.view(len(sentence), -1))
    tag_scores = F.log_softmax(tag_space, dim=1)
    return tag_scores

##创建模型
##对于bert模型调用报错的处理
##huggingface-cli login
##use_auth_token=True
##第一次处理完毕
##model = LSTMTagger(EMBEDDING_DIM, HIDDEN_DIM, len(word_to_ix), len(tag_to_ix))
tokenizer=BertTokenizer.from_pretrained('bert-base-uncased')
model = LSTMTagger(EMBEDDING_DIM, HIDDEN_DIM, len(word_to_ix), len(tag_to_ix),tokenizer)
loss_function = nn.NLLLoss()
optimizer = optim.SGD(model.parameters(), lr=0.1)

# See what the scores are before training
# Note that element i,j of the output is the score for tag j for word i.
# Here we don't need to train, so the code is wrapped in torch.no_grad()
with torch.no_grad():
  inputs = prepare_sequence(training_data[0][0], word_to_ix)
  inputs = inputs.unsqueeze(0)
  # 增加一个维度，这次一定要成功啊
  outputs = model(inputs)
  ##last_hidden_state = outputs.last_hidden_state
  ##reshaped = last_hidden_state.view(6,5)
  tag_scores = model(inputs)

##原版是300次
for epoch in range(10):
  ## again, normally you would NOT do 300 epochs, it is toy data
  for sentence, tags in training_data:
    # Step 1. Remember that Pytorch accumulates gradients.
    # We need to clear them out before each instance
    model.zero_grad()

    # Step 2. Get our inputs ready for the network, that is, turn them into
    # Tensors of word indices.
    sentence_in = prepare_sequence(sentence, word_to_ix)
    targets = prepare_sequence(tags, tag_to_ix)
    print("sentence_in",sentence_in)
    print("targets",targets)
    # Step 3. Run our forward pass.
    print("This is for model:",torch.reshape(sentence_in,(1,5)))
    ##tag_scores = model(torch.reshape(sentence_in[1:6],(1,4)))
    tag_scores = model(torch.reshape(sentence_in,(1,5)))
    targets = model(torch.reshape(targets,(1,5)))
    print("Here we show two tag")
    print("This is tag_scores:",tag_scores)
    print("This is targets:",targets)
    # Step 4. Compute the loss, gradients, and update the parameters by
    #  calling optimizer.step()
    print(tag_scores.shape)
    print(targets.shape)
    loss = loss_function(tag_scores, targets)
    loss.backward()
    optimizer.step()
